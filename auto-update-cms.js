/**
 * Auto-Update CMS System
 * Automatically detects new research articles and updates the manifest
 * Run this script after adding content through Netlify CMS
 */

const fs = require('fs');
const path = require('path');

class AutoUpdateCMS {
    constructor() {
        this.researchDir = path.join(__dirname, 'content', 'research');
        this.manifestPath = path.join(this.researchDir, 'manifest.json');
        this.isWatching = false;
    }

    // Simple polling-based file watching (no external dependencies)
    startWatching() {
        if (this.isWatching) {
            console.log('⚠️ Already watching for changes...');
            return;
        }

        console.log('👁️ Starting simple file watcher for research content...');
        console.log('📂 Watching directory:', this.researchDir);
        
        // Store initial state
        let lastState = this.getDirectoryState();
        
        // Check for changes every 5 seconds
        const watchInterval = setInterval(() => {
            const currentState = this.getDirectoryState();
            
            if (JSON.stringify(currentState) !== JSON.stringify(lastState)) {
                console.log('📝 Changes detected in research directory');
                this.detectChanges(lastState, currentState);
                this.updateManifest();
                lastState = currentState;
            }
        }, 5000);

        this.isWatching = true;
        console.log('✅ Simple file watcher started successfully!');
        console.log('💡 Checking for changes every 5 seconds');
        console.log('💡 The carousel will auto-update when you add/edit articles');
        console.log('🛑 Press Ctrl+C to stop watching');
        
        // Handle graceful shutdown
        process.on('SIGINT', () => {
            console.log('\n🛑 Stopping file watcher...');
            clearInterval(watchInterval);
            console.log('✅ File watcher stopped');
            process.exit(0);
        });
    }

    getDirectoryState() {
        try {
            const files = fs.readdirSync(this.researchDir)
                .filter(file => file.endsWith('.md'))
                .map(file => {
                    const filePath = path.join(this.researchDir, file);
                    const stats = fs.statSync(filePath);
                    return {
                        name: file,
                        size: stats.size,
                        modified: stats.mtime.getTime()
                    };
                });
            return files;
        } catch (error) {
            console.error('❌ Error reading directory state:', error);
            return [];
        }
    }

    detectChanges(oldState, newState) {
        const oldFiles = new Map(oldState.map(f => [f.name, f]));
        const newFiles = new Map(newState.map(f => [f.name, f]));
        
        // Detect new files
        for (const [name, file] of newFiles) {
            if (!oldFiles.has(name)) {
                console.log(`➕ New article detected: ${name}`);
            } else if (oldFiles.get(name).modified !== file.modified) {
                console.log(`📝 Article updated: ${name}`);
            }
        }
        
        // Detect removed files
        for (const [name] of oldFiles) {
            if (!newFiles.has(name)) {
                console.log(`🗑️ Article removed: ${name}`);
            }
        }
    }

    updateManifest() {
        try {
            // Get all .md files in the research directory
            const files = fs.readdirSync(this.researchDir)
                .filter(file => file.endsWith('.md'))
                .sort((a, b) => b.localeCompare(a)); // Sort newest first

            const manifest = {
                files: files,
                lastUpdated: new Date().toISOString(),
                totalArticles: files.length,
                updateId: Date.now(),
                autoGenerated: true
            };

            // Write the manifest file
            fs.writeFileSync(this.manifestPath, JSON.stringify(manifest, null, 2));

            console.log(`✅ Manifest updated: ${files.length} articles`);
            files.forEach(file => console.log(`   📄 ${file}`));
            console.log(`🕒 Last updated: ${manifest.lastUpdated}`);
            console.log('🔄 Website will auto-refresh content in ~30 seconds');

        } catch (error) {
            console.error('❌ Error updating manifest:', error);
        }
    }

    // One-time update without watching
    updateOnce() {
        console.log('🔄 Updating manifest once...');
        this.updateManifest();
        console.log('✅ Manifest updated successfully!');
    }
}

// Command line interface
const args = process.argv.slice(2);
const autoUpdater = new AutoUpdateCMS();

if (args.includes('--watch') || args.includes('-w')) {
    autoUpdater.startWatching();
} else if (args.includes('--help') || args.includes('-h')) {
    console.log(`
📚 Auto-Update CMS Help

Usage:
  node auto-update-cms.js           # Update manifest once
  node auto-update-cms.js --watch   # Watch for changes and auto-update
  node auto-update-cms.js -w        # Short form of --watch
  node auto-update-cms.js --help    # Show this help

Features:
  ✅ Automatically detects new research articles
  ✅ Updates manifest when files are added/changed/removed
  ✅ Triggers website auto-refresh
  ✅ Works with Netlify CMS workflow

Workflow:
  1. Add/edit articles in your CMS
  2. Run this script with --watch
  3. Website automatically updates when content changes
  4. No manual intervention required!
`);
} else {
    autoUpdater.updateOnce();
}

module.exports = AutoUpdateCMS;